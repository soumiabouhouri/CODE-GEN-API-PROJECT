/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-06-07T13:28:51.174Z[GMT]")
@Api(value = "User", description = "the User API")
public interface UserApi {

    @ApiOperation(value = "Create new user", nickname = "createuser", notes = "Calling this allows you to create an user", response = User.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "create user", response = User.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/User/register",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> createuser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body
);


    @ApiOperation(value = "Delete User by Id", nickname = "deleteuserbyid", notes = "Calling this allows you to fetch the users", response = User.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the users", response = User.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/User/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<User> deleteuserbyid(@ApiParam(value = "ID of article to retun",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "Get user by id", nickname = "getuserbyid", notes = "Calling this allows you to fetch the articles", response = User.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the articles", response = User.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/User/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getuserbyid(@ApiParam(value = "ID of article to retun",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "Get all users", nickname = "getusers", notes = "Calling this allows you to fetch the users", response = User.class, responseContainer = "List", tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the users", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/User",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getusers(@ApiParam(value = "Filtering user by gender") @Valid @RequestParam(value = "filterGender", required = false) String filterGender
,@ApiParam(value = "Max of number of users to return") @Valid @RequestParam(value = "limit", required = false) Integer limit
);


    @ApiOperation(value = "Login with user", nickname = "login", notes = "", response = InlineResponse200.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Logging In", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/User/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse200> login(@ApiParam(value = ""  )  @Valid @RequestBody User body
);


    @ApiOperation(value = "Delete User by Id", nickname = "updateuser", notes = "Calling this allows you to fetch the users", response = User.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the users", response = User.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/User/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<User> updateuser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body
,@ApiParam(value = "ID of article to retun",required=true) @PathVariable("id") Long id
);

}
